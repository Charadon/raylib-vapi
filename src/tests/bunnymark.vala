using RaylibOOP;
using RaylibOOP.Shapes;
using RaylibOOP.Color;
using RaylibOOP.Input;
using GLib.Random;

Window window;
namespace Graphics {
	const uint8[] bunny = {
		0x89, 0x50, 0x4e, 0x47, 0xd, 0xa, 0x1a, 0xa, 0x0, 0x0, 0x0, 0xd, 0x49, 0x48, 0x44, 0x52, 0x0, 0x0, 0x0, 0x20,
		0x0, 0x0, 0x0, 0x20, 0x8, 0x4, 0x0, 0x0, 0x0, 0xd9, 0x73, 0xb2, 0x7f, 0x0, 0x0, 0x1, 0xb7, 0x49, 0x44, 0x41, 0x54,
		0x78, 0xda, 0x84, 0x95, 0xcd, 0x75, 0xe3, 0x30, 0xc, 0x84, 0x3f, 0xe4, 0xb1, 0x96, 0x55, 0x21, 0x7b, 0xcd, 0xb6, 0xa1, 0x2,
		0x22, 0x97, 0x21, 0xfa, 0x9e, 0xb4, 0xe1, 0x5c, 0xd3, 0xc7, 0x5a, 0x29, 0x66, 0xf6, 0x20, 0x88, 0x22, 0x28, 0x72, 0xc3, 0xf7,
		0x6c, 0xd9, 0x20, 0x31, 0x1c, 0xfc, 0xc, 0x64, 0xe2, 0x58, 0x5f, 0x8, 0xe3, 0x37, 0x56, 0x4c, 0xb2, 0xfd, 0x59, 0x5b, 0xee,
		0x8, 0x43, 0x2c, 0x6e, 0x49, 0x54, 0xcb, 0x0, 0xd3, 0xca, 0x4, 0x8, 0xc3, 0x94, 0xd, 0x16, 0x3d, 0xce, 0x13, 0x5a, 0xcd,
		0x10, 0x56, 0x2c, 0x1, 0x60, 0xdf, 0x30, 0x5e, 0x1, 0xf8, 0x74, 0x1b, 0x3c, 0xfd, 0xbe, 0x7, 0x60, 0xce, 0xe0, 0x58, 0x2f,
		0x2d, 0x3, 0xaa, 0xcd, 0x68, 0xdf, 0x9f, 0xd1, 0xbd, 0x1, 0x88, 0xae, 0x2a, 0x9c, 0xfa, 0xfb, 0x97, 0x10, 0xe2, 0x61, 0xd8,
		0x9c, 0x70, 0x9f, 0x49, 0x87, 0xc1, 0x69, 0xce, 0x40, 0xc6, 0x58, 0x59, 0x74, 0x53, 0x6, 0xee, 0x6e, 0xdd, 0x2f, 0x52, 0x5,
		0x3b, 0x60, 0x70, 0xf7, 0xff, 0xb9, 0xec, 0xe4, 0x90, 0x87, 0x1f, 0x18, 0x80, 0xb8, 0x61, 0xd5, 0x5d, 0xcb, 0x30, 0x13, 0x4d,
		0x12, 0x15, 0xaa, 0x11, 0x63, 0xae, 0x6b, 0x64, 0x3d, 0x0, 0x35, 0x79, 0xa8, 0xdd, 0xd6, 0x2, 0x6f, 0xd, 0xd7, 0xd4, 0xab,
		0xf7, 0x51, 0xc0, 0x83, 0xf8, 0xea, 0xbb, 0x76, 0x9, 0xb5, 0x6a, 0xf3, 0xe3, 0x47, 0xf6, 0x7b, 0xf6, 0x0, 0xde, 0x80, 0x7b,
		0x15, 0xf5, 0xc4, 0x9f, 0x46, 0x27, 0xe9, 0x70, 0x9f, 0x43, 0x8a, 0x74, 0xe9, 0x45, 0x79, 0x6f, 0x3c, 0x8a, 0x4e, 0x76, 0x88,
		0xd4, 0x76, 0xd6, 0xe6, 0x52, 0xda, 0x3f, 0xd9, 0x63, 0x56, 0x81, 0xd9, 0x9a, 0x66, 0xbe, 0x84, 0x30, 0x23, 0xa6, 0x42, 0xf8,
		0x60, 0xf5, 0x5d, 0x95, 0xb7, 0x1b, 0x2, 0xcc, 0x6e, 0xf8, 0xd0, 0xcc, 0xc6, 0x2f, 0x60, 0x72, 0x55, 0x1e, 0xca, 0xdc, 0x10,
		0x37, 0xb2, 0x69, 0xd4, 0xca, 0x75, 0xfc, 0x16, 0xdc, 0xe1, 0xb5, 0xf4, 0x45, 0xab, 0x98, 0x74, 0xed, 0x30, 0xb, 0xbd, 0x1e,
		0xb5, 0x79, 0x4d, 0x70, 0x8a, 0x5d, 0xa0, 0x50, 0xf1, 0xfe, 0x8a, 0x6a, 0x48, 0xfd, 0x79, 0xa0, 0xa1, 0xab, 0x8d, 0xb4, 0xa0,
		0xe6, 0xe6, 0x27, 0x8f, 0xea, 0xd8, 0x27, 0xdb, 0x45, 0x21, 0xd, 0x3, 0xbb, 0xdc, 0xf5, 0xed, 0x53, 0x71, 0x87, 0xb3, 0x1,
		0xbb, 0x54, 0x4f, 0x3, 0x85, 0x74, 0x99, 0xbb, 0xc9, 0x99, 0xf5, 0xc3, 0x4a, 0x31, 0xbe, 0x28, 0xde, 0x67, 0x25, 0xaf, 0xa9,
		0xd8, 0x7, 0x53, 0x59, 0xcd, 0xb7, 0x82, 0xbb, 0xb1, 0x55, 0x2a, 0xd5, 0x78, 0xa8, 0x9e, 0x23, 0x64, 0x69, 0xa8, 0xce, 0xfc,
		0x65, 0x6a, 0x58, 0x76, 0x92, 0x78, 0x60, 0x2f, 0xde, 0xda, 0x67, 0xce, 0x3f, 0x34, 0xf3, 0xfc, 0xdf, 0x48, 0x53, 0x78, 0x75,
		0xf4, 0x61, 0x7b, 0x95, 0x78, 0xe9, 0x97, 0xf1, 0xa, 0x5b, 0x3b, 0xd, 0x47, 0x5a, 0x3b, 0x17, 0xcf, 0xf2, 0x9e, 0x10, 0x6f,
		0xe3, 0x37, 0x93, 0x17, 0xc9, 0x4c, 0xa7, 0xda, 0xcf, 0xf5, 0x3e, 0xb0, 0xff, 0x1b, 0x0, 0x7c, 0x82, 0xb4, 0x2d, 0x5c, 0x86,
		0x3a, 0x2f, 0x0, 0x0, 0x0, 0x0, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
	};
}

public class Bunny : GLib.Object {
	private Vector2 position;
	private Vector2 speed;
	private Raylib.Color color;
	public static Raylib.Texture2D sprite;
	public Bunny(Vector2 pos, float speedX, float speedY, Raylib.Color color) {
		this.position = new Vector2(pos.x, pos.y);
		this.speed = new Vector2(speedX, speedY);
		this.color = color;
	}
	public void update() {
		this.position.x += this.speed.x;
		this.position.y += this.speed.y;
		if (((this.position.x + Bunny.sprite.width/2) > window.width) ||
			((this.position.x + Bunny.sprite.width/2) < 0))
			this.speed.x *= -1;
		if (((this.position.y + Bunny.sprite.height/2) > window.height) ||
			((this.position.y + Bunny.sprite.height/2 - 40) < 0))
			this.speed.y *= -1;
		Raylib.draw_texture(Bunny.sprite, (int)this.position.x, (int)this.position.y, this.color);
	}
	~Bunny() {
		position = null;
		speed = null;
	}
}

int main() {
	try {
		window = new Window(800, 450, "Bunnymark!");
	} catch(WindowError e) {
		error(e.message);
	}
	window.minimum_width = 0;
	window.minimum_height = 0;
	set_seed((uint32)new DateTime.now_local().to_unix());
	var bunny_img = Raylib.load_image_from_memory(".png", Graphics.bunny);
	Bunny.sprite = Raylib.load_texture_from_image(bunny_img);
	Raylib.unload_image(bunny_img);
	Array<Bunny> bunnies = new Array<Bunny>();
	window.target_fps = 60;
	while(window.should_close == false) {
		/* Create new Bunnies */
		if(Mouse.is_down(Mouse.Button.LEFT)) {
			for(int i = 0; i < 100; i++)
				bunnies.append_val(new Bunny(
					Mouse.position,
					int_range(-250, 250)/60.0f,
					int_range(-250, 250)/60.0f,
					Color.Custom.from_rgba(
						(uint8)int_range(50, 240),
						(uint8)int_range(80, 240),
						(uint8)int_range(100, 240),
						255)));
		} else if(Mouse.is_down(Mouse.Button.RIGHT)) {
			for(int i = 0; i < 10000; i++)
				bunnies.append_val(new Bunny(
					Mouse.position,
					int_range(-250, 250)/60.0f,
					int_range(-250, 250)/60.0f,
					Color.Custom.from_rgba(
						(uint8)int_range(50, 240),
						(uint8)int_range(80, 240),
						(uint8)int_range(100, 240),
						255)));
		} else if(Mouse.is_down(Mouse.Button.MIDDLE)) { /* KILL THE BUNNIES */
			if(bunnies.length > 0)
				bunnies.remove_range(0, 100);
		}
		/* Draw Frames */
		window.draw(()=>{
			window.clear_background(WHITE);
			for(int i = 0; i < bunnies.length; i++)
				bunnies.index(i).update();
			Raylib.draw_rectangle(0, 0, window.width, 40, BLACK);
			Raylib.draw_text(@"Bunnies: $(bunnies.length)", 120, 10, 20, GREEN);

			window.draw_fps(10, 10);
		});
		/* Get final bunny score once framerate dips below 55 */
		if(window.fps < 55 && Environment.get_variable("UNLIMITED_BUNNIES") != "1") {
			break;
		}
	}
	window = null;
	info(@"Total Bunnies: $(bunnies.length)");
	bunnies = null;
	return(0);
}
